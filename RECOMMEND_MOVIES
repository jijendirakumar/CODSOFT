import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
movies = [
    {"title": "Vikram", "description": "A special agent hunts down masked vigilantes."},
    {"title": "Kaithi", "description": "An ex-convict fights criminals to save injured cops."},
    {"title": "Jailer", "description": "A retired jailer takes on a ruthless crime syndicate."},
    {"title": "Ponniyin Selvan", "description": "A grand historical saga of the Chola empire."},
    {"title": "Soorarai Pottru", "description": "A man fights to start a low-cost airline in India."},
    {"title": "Thunivu", "description": "A mysterious mastermind takes over a bank in a heist."},
    {"title": "Master", "description": "A professor takes on a violent juvenile gang leader."},
    {"title": "Vada Chennai", "description": "A carrom player gets trapped in North Chennai's gang wars."},
    {"title": "Anniyan", "description": "A lawyer turns into a vigilante to punish wrongdoers."},
    {"title": "Enthiran", "description": "A humanoid robot gains emotions and turns rogue."}
]
titles_dict = {movie["title"].lower(): i for i, movie in enumerate(movies)}
descriptions = [movie["description"] for movie in movies]
vectorizer = TfidfVectorizer()
description_vectors = vectorizer.fit_transform(descriptions)
similarity_matrix = cosine_similarity(description_vectors)
def recommend_movies(movie_title, movies, similarity_matrix, top_n=3):
    movie_title = movie_title.lower().strip()
    if movie_title not in titles_dict:
        return ["Movie not found in database. Please try another title."]
    movie_index = titles_dict[movie_title] 
    similarity_scores = list(enumerate(similarity_matrix[movie_index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    recommended_movie_indices = [index for index, score in similarity_scores[1:top_n+1]]
    return [movies[i]["title"] for i in recommended_movie_indices]
movie_to_recommend = input("Enter a movie title: ")
recommendations = recommend_movies(movie_to_recommend, movies, similarity_matrix)
print(f"Movies recommended for '{movie_to_recommend}': {recommendations}")
